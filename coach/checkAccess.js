// /coach/checkAccess.js

const fs = require('fs');
const path = require('path');

const PROGRESS_PATH = path.join(__dirname, '../progress/progress.json');
const MISSIONS_PATH = path.join(__dirname, './missions/dailyChallenges.json');

/**
 * Charge la progression utilisateur depuis le fichier.
 */
function getProgress() {
  if (!fs.existsSync(PROGRESS_PATH)) return {};
  return JSON.parse(fs.readFileSync(PROGRESS_PATH, 'utf8'));
}

/**
 * V√©rifie si l'utilisateur peut acc√©der au jour demand√©.
 * @param {number} userId - ID Telegram.
 * @param {number} day - Num√©ro du jour demand√©.
 * @returns {{ allowed: boolean, reason?: string }}
 */
function canAccessDay(userId, day) {
  const progress = getProgress();
  const user = progress[userId];

  if (!user) {
    return { allowed: false, reason: "üö´ Utilisateur non inscrit." };
  }

  // üõë Si jour demand√© d√©passe le jour maximum
  if (day > user.dayMax) {
    return { allowed: false, reason: "üîí Ce jour n'est pas encore d√©bloqu√©. Revenez demain." };
  }

  // üõë Si la mission du jour pr√©c√©dent n‚Äôa pas √©t√© compl√©t√©e
  const previousDay = day - 1;
  const missionRequired = previousDay >= 1;
  const missionDone = !missionRequired || user.missions?.[previousDay];

  if (!missionDone) {
    return { allowed: false, reason: `üìù Merci de r√©pondre √† la mission du jour ${previousDay} avant de continuer.` };
  }

  // üõë Limite de la version d√©mo (3 jours max)
  if (user.demo && day > 3) {
    return {
      allowed: false,
      reason: "üöß Tu as atteint la fin de la d√©mo gratuite. Active la version compl√®te pour continuer."
    };
  }

  return { allowed: true };
}

/**
 * Sauvegarde qu‚Äôune mission a √©t√© compl√©t√©e.
 * @param {number} userId - ID Telegram.
 * @param {number} day - Jour correspondant √† la mission.
 * @param {string} response - R√©ponse de l‚Äôutilisateur.
 */
function saveMissionResponse(userId, day, response) {
  const progress = getProgress();
  if (!progress[userId]) return;

  if (!progress[userId].missions) progress[userId].missions = {};
  progress[userId].missions[day] = response;
  fs.writeFileSync(PROGRESS_PATH, JSON.stringify(progress, null, 2));
}

module.exports = {
  canAccessDay,
  saveMissionResponse
};
